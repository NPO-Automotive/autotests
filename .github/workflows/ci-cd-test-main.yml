
name: CI/CD for Main Branch

on:
  pull_request:
    branches:
      - main
      - canary
  push:
    branches:
      - main
      - canary

permissions:
  contents: write
  pages: write
  id-token: write

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-22.05

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: false

      - name: Get Branch Names and Target Branch
        run: |
          echo "CLIENT_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV

          # Extract Server Branch Name from PR description
          SERVER_BRANCH=$(echo "${{ github.event.pull_request.body }}" | grep -oP '(?<=Server branch: )[^ ]+' || echo "default-branch")

          echo "Extracted SERVER_BRANCH: $SERVER_BRANCH"  # Debugging output
          echo "SERVER_BRANCH=${SERVER_BRANCH:-$CLIENT_BRANCH}" >> $GITHUB_ENV

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUTOTEST_ACTIONS }}" | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 2222 89.23.4.133 >> ~/.ssh/known_hosts
          
      - name: Client Connect to server and perform Git operations
        run: |
          echo "Initializing SSH connection..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p 2222 npo@89.23.4.133 << 'EOF'
            set -euxo pipefail  # Enable strict error handling

            echo "‚úÖ TARGET_BRANCH is: ${TARGET_BRANCH}"
            echo "‚úÖ CLIENT_BRANCH is: ${CLIENT_BRANCH}"

            # **Remove everything in the repo directory**
            echo "‚ö†Ô∏è Removing all existing repo files..."
            rm -rf ~/autodeploy-test/sep_erp_client || { echo "‚ùå Failed to remove old repo"; exit 1; }

            # **Clone a fresh copy**
            echo "‚ö†Ô∏è Cloning a fresh repository..."
            git clone git@github.com:NPO-Automotive/sep_erp_client.git ~/autodeploy-test/sep_erp_client || { echo "‚ùå Failed to clone fresh repo"; exit 1; }
            cd ~/autodeploy-test/sep_erp_client || { echo "‚ùå Failed to change directory"; exit 1; }

            # **Checkout CLIENT_BRANCH**
            echo "‚ö†Ô∏è Checking out CLIENT_BRANCH fresh..."
            git checkout ${CLIENT_BRANCH} || git checkout -b ${CLIENT_BRANCH} origin/${CLIENT_BRANCH} || { echo "‚ùå Failed to create fresh CLIENT_BRANCH"; exit 1; }
      
            # **Ensure latest CLIENT_BRANCH version**
            git pull --force origin ${CLIENT_BRANCH} || { echo "‚ùå Failed to pull latest CLIENT_BRANCH"; exit 1; }

            # **Merge CLIENT_BRANCH into TARGET_BRANCH safely**
            git checkout ${TARGET_BRANCH} || { echo "‚ùå Failed to switch back to TARGET_BRANCH"; exit 1; }
            git merge --no-commit --no-ff ${CLIENT_BRANCH} || { echo "‚ùå Failed to merge ${CLIENT_BRANCH} into ${TARGET_BRANCH}"; exit 1; }

            # **Verify pnpm installation**
            command -v pnpm || { echo "‚ùå pnpm missing! Attempting installation..."; npm install -g pnpm; }

            # **Build site**
            pnpm i || { echo "‚ùå Failed to install dependencies"; exit 1; }
            pnpm run build || { echo "‚ùå Failed to build site"; exit 1; }
            rsync -av build/ dist/ || { echo "‚ùå Failed to sync build to dist"; exit 1; }
          EOF

      - name: Server Connect and Perform Git Operations
        run: |
          # Attempt SSH connection with debugging enabled
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p 2222 npo@89.23.4.133 \
          "TARGET_BRANCH=${TARGET_BRANCH} SERVER_BRANCH=${SERVER_BRANCH} bash -c ' 
          set -x  
          echo \"‚úÖ TARGET_BRANCH is: $TARGET_BRANCH\"
          echo \"‚úÖ SERVER_BRANCH is: $SERVER_BRANCH\"
          docker exec -e TARGET_BRANCH=\"$TARGET_BRANCH\" -e SERVER_BRANCH=\"$SERVER_BRANCH\" sep-erp-test_app_test_1 bash -c \"set -e;

          echo \\\"üìå [START] Fetching branches for SERVER_BRANCH: \$SERVER_BRANCH on TARGET_BRANCH: \$TARGET_BRANCH\\\";

          echo \\\"üîπ TARGET_BRANCH is: \$TARGET_BRANCH\\\";
          echo \\\"üîπ SERVER_BRANCH is: \$SERVER_BRANCH\\\";

          git fetch --all || { echo \\\"‚ùå Failed to fetch branches\\\"; exit 1; }
          git reset --hard origin/\$TARGET_BRANCH || { echo \\\"‚ùå Failed to reset TARGET_BRANCH\\\"; exit 1; }

          git switch \$TARGET_BRANCH || { echo \\\"‚ùå Failed to switch to TARGET_BRANCH\\\"; exit 1; }

          # Ensure the local SERVER_BRANCH is deleted before pulling from remote
          if git show-ref --verify --quiet refs/heads/\$SERVER_BRANCH; then
            git branch -D \$SERVER_BRANCH || echo \\\"‚úÖ No existing local branch \$SERVER_BRANCH, skipping deletion.\\\"
          else
            echo \\\"‚úÖ No existing local branch \$SERVER_BRANCH, skipping deletion.\\\"
          fi

          git pull origin \$TARGET_BRANCH || { echo \\\"‚ùå Failed to pull TARGET_BRANCH\\\"; exit 1; }

          # Force reset instead of pull to avoid fast-forward issues
          git fetch origin \$SERVER_BRANCH || { echo \\\"‚ùå Failed to fetch SERVER_BRANCH\\\"; exit 1; }
          git reset --hard origin/\$SERVER_BRANCH || { echo \\\"‚ùå Failed to reset SERVER_BRANCH\\\"; exit 1; }

          # Merge SERVER_BRANCH into TARGET_BRANCH
          git checkout \$TARGET_BRANCH || { echo \\\"‚ùå Failed to switch back to TARGET_BRANCH\\\"; exit 1; }
          git merge --no-commit --no-ff origin/\$SERVER_BRANCH || { echo \\\"‚ùå Failed to merge SERVER_BRANCH into TARGET_BRANCH\\\"; exit 1; }

          pnpm run migrate:up
          pnpm i || { echo \\\"‚ùå Failed to install dependencies\\\"; exit 1; }
          pnpm run build || { echo \\\"‚ùå Failed to build site\\\"; exit 1; }
          echo \\\"üìå [COMPLETE] Server operations finished successfully!\\\";
          
          \" || { echo \"‚ùå Docker exec command failed\"; exit 1; }
          echo \\\"üîÑ Restarting Docker container...\\\"
          docker restart sep-erp-test_app_test_1 2>&1 | tee /tmp/docker_restart.log || { echo \"‚ùå Failed to restart Docker container\"; cat /tmp/docker_restart.log; exit 1; }
          '"


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
          cache: 'npm'

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
            playwright-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright dependencies
        run: sudo npx playwright install-deps

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Run Playwright tests with xvfb
        env:
          TEST_DIR: '.'
          BASE_URL: 'http://dev.pksep.ru/'
        run: xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" npm run test

      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: allure-results
          path: allure-results
          retention-days: 20

      - name: Get Allure history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Generate Allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 20

      - name: Create index.html
        if: always()
        run: |
          mkdir -p allure-history
          echo '<meta http-equiv="refresh" content="0; URL=./latest/index.html">' > allure-history/index.html

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.AUTOTEST_ACTIONS }}
          publish_branch: gh-pages
          publish_dir: allure-history
          force_orphan: true

      - name: Cleanup
        if: always()
        run: |
          git config --global --unset safe.directory || true
          rm -rf .git/modules/* || true
